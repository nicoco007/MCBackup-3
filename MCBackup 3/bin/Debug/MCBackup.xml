<?xml version="1.0"?>
<doc>
<assembly>
<name>
MCBackup
</name>
</assembly>
<members>
<member name="M:MCBackup.MainWindow.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:MCBackup.MainWindow">
	<summary>
MainWindow
</summary>
</member><member name="M:MCBackup.ErrorWindow.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:MCBackup.ErrorWindow">
	<summary>
ErrorWindow
</summary>
</member><member name="M:MCBackup.About.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:MCBackup.About">
	<summary>
About
</summary>
</member><member name="M:MCBackup.AutoBackup.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:MCBackup.AutoBackup">
	<summary>
AutoBackup
</summary>
</member><member name="M:MCBackup.CloseToTray.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:MCBackup.CloseToTray">
	<summary>
CloseToTray
</summary>
</member><member name="M:MCBackup.Backup.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:MCBackup.Backup">
	<summary>
Backup
</summary>
</member><member name="M:MCBackup.Splash.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:MCBackup.Splash">
	<summary>
Splash
</summary>
</member><member name="M:MCBackup.Application.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="M:MCBackup.Application.Main">
	<summary>
Application Entry Point.
</summary>
</member><member name="T:MCBackup.Application">
	<summary>
Application
</summary>
</member><member name="M:MCBackup.CullWindow.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:MCBackup.CullWindow">
	<summary>
CullWindow
</summary>
</member><member name="M:MCBackup.Options.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:MCBackup.Options">
	<summary>
Options
</summary>
</member><member name="M:MCBackup.MetroMessageBox.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:MCBackup.MetroMessageBox">
	<summary>
MetroMessageBox
</summary>
</member><member name="M:MCBackup.Rename.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:MCBackup.Rename">
	<summary>
Rename
</summary>
</member><member name="M:MCBackup.UpdateDialog.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:MCBackup.UpdateDialog">
	<summary>
UpdateDialog
</summary>
</member><member name="M:MCBackup.sha1.GetSHA1(System.String)">
	<summary>
 Converts a string to a SHA1 hash
 </summary>
	<param name="StringToHash">String to hash using SHA1</param>
	<returns>SHA1 hash</returns>
	<remarks></remarks>
</member><member name="P:MCBackup.My.Resources.Resources.ResourceManager">
	<summary>
  Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
</summary>
</member><member name="P:MCBackup.My.Resources.Resources.Culture">
	<summary>
  Remplace la propriété CurrentUICulture du thread actuel pour toutes
  les recherches de ressources à l'aide de cette classe de ressource fortement typée.
</summary>
</member><member name="P:MCBackup.My.Resources.Resources.msgbox_error">
	<summary>
  Recherche une ressource localisée de type System.Drawing.Bitmap.
</summary>
</member><member name="P:MCBackup.My.Resources.Resources.msgbox_info">
	<summary>
  Recherche une ressource localisée de type System.Drawing.Bitmap.
</summary>
</member><member name="P:MCBackup.My.Resources.Resources.msgbox_question">
	<summary>
  Recherche une ressource localisée de type System.Drawing.Bitmap.
</summary>
</member><member name="T:MCBackup.My.Resources.Resources">
	<summary>
  Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
</summary>
</member><member name="M:MCBackup.FolderSelectDialog.#ctor">
	<summary>
 Default constructor
 </summary>
</member><member name="P:MCBackup.FolderSelectDialog.InitialDirectory">
	<summary>
 Gets/Sets the initial folder to be selected. A null value selects the current directory.
 </summary>
</member><member name="P:MCBackup.FolderSelectDialog.Title">
	<summary>
 Gets/Sets the title to show in the dialog
 </summary>
</member><member name="P:MCBackup.FolderSelectDialog.FileName">
	<summary>
 Gets the selected folder
 </summary>
</member><member name="M:MCBackup.FolderSelectDialog.ShowDialog">
	<summary>
 Shows the dialog
 </summary>
	<returns>True if the user presses OK else false</returns>
</member><member name="M:MCBackup.FolderSelectDialog.ShowDialog(System.IntPtr)">
	<summary>
 Shows the dialog
 </summary>
	<param name="hWndOwner">Handle of the control to be parent</param>
	<returns>True if the user presses OK else false</returns>
</member><member name="T:MCBackup.FolderSelectDialog">
	<summary>
 Wraps System.Windows.Forms.OpenFileDialog to make it present
 a vista-style dialog.
 </summary>
</member><member name="M:MCBackup.WindowWrapper.#ctor(System.IntPtr)">
	<summary>
 Constructor
 </summary>
	<param name="handle">Handle to wrap</param>
</member><member name="P:MCBackup.WindowWrapper.Handle">
	<summary>
 Original ptr
 </summary>
</member><member name="T:MCBackup.WindowWrapper">
	<summary>
 Creates IWin32Window around an IntPtr
 </summary>
</member><member name="M:MCBackup.Log.StartNew">
	<summary>
 Starts new logging session
 </summary>
	<remarks></remarks>
</member><member name="M:MCBackup.Log.DPrint(System.String)">
	<summary>
 Prints a plain message in the log, whithout timestamp.
 </summary>
	<param name="Message">Message to print in log</param>
	<remarks></remarks>
</member><member name="M:MCBackup.Log.Print(System.String)">
	<summary>
 Prints a message in the log, with a timestamp and INFO tag.
 </summary>
	<param name="Message">Message to print in log</param>
	<remarks></remarks>
</member><member name="M:MCBackup.Log.Print(System.String,System.String)">
	<summary>
 Prints a message in the log, with a timestamp and specified tag.
 </summary>
	<param name="Message">Message to print in log</param>
	<param name="LogType">Tag to show ([INFO], [WARNING], [SEVERE])</param>
	<remarks></remarks>
</member><member name="M:MCBackup.Log.DebugTimeStamp">
	<summary>
 Returns a log timestamp
 </summary>
	<returns>A timestamp in the form YYYY-MM-DD hh:mm:ss</returns>
	<remarks></remarks>
</member><member name="M:MCBackup.Log.GetWindowsVersion">
	<summary>
 Converts Windows NT version to 'human-readable' name
 </summary>
	<returns>Windows OS Version name</returns>
	<remarks></remarks>
</member><member name="M:MCBackup.Log.GetWindowsArch">
	<summary>
 Gets windows architecture
 </summary>
	<returns>Windows architecture (32/64bit)</returns>
	<remarks></remarks>
</member><member name="M:MCBackup.Reflector.#ctor(System.String)">
	<summary>
 Constructor
 </summary>
	<param name="ns">The namespace containing types to be used</param>
</member><member name="M:MCBackup.Reflector.#ctor(System.String,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="an__1">A specific assembly name (used if the assembly name does not tie exactly with the namespace)</param>
	<param name="ns">The namespace containing types to be used</param>
</member><member name="M:MCBackup.Reflector.GetType(System.String)">
	<summary>
 Return a Type instance for a type 'typeName'
 </summary>
	<param name="typeName">The name of the type</param>
	<returns>A type instance</returns>
</member><member name="M:MCBackup.Reflector.New(System.String,System.Object[])">
	<summary>
 Create a new object of a named type passing along any params
 </summary>
	<param name="name">The name of the type to create</param>
	<param name="parameters"></param>
	<returns>An instantiated type</returns>
</member><member name="M:MCBackup.Reflector.Call(System.Object,System.String,System.Object[])">
	<summary>
 Calls method 'func' on object 'obj' passing parameters 'parameters'
 </summary>
	<param name="obj">The object on which to excute function 'func'</param>
	<param name="func">The function to execute</param>
	<param name="parameters">The parameters to pass to function 'func'</param>
	<returns>The result of the function invocation</returns>
</member><member name="M:MCBackup.Reflector.Call2(System.Object,System.String,System.Object[])">
	<summary>
 Calls method 'func' on object 'obj' passing parameters 'parameters'
 </summary>
	<param name="obj">The object on which to excute function 'func'</param>
	<param name="func">The function to execute</param>
	<param name="parameters">The parameters to pass to function 'func'</param>
	<returns>The result of the function invocation</returns>
</member><member name="M:MCBackup.Reflector.CallAs(System.Type,System.Object,System.String,System.Object[])">
	<summary>
 Calls method 'func' on object 'obj' which is of type 'type' passing parameters 'parameters'
 </summary>
	<param name="type">The type of 'obj'</param>
	<param name="obj">The object on which to excute function 'func'</param>
	<param name="func">The function to execute</param>
	<param name="parameters">The parameters to pass to function 'func'</param>
	<returns>The result of the function invocation</returns>
</member><member name="M:MCBackup.Reflector.CallAs2(System.Type,System.Object,System.String,System.Object[])">
	<summary>
 Calls method 'func' on object 'obj' which is of type 'type' passing parameters 'parameters'
 </summary>
	<param name="type">The type of 'obj'</param>
	<param name="obj">The object on which to excute function 'func'</param>
	<param name="func">The function to execute</param>
	<param name="parameters">The parameters to pass to function 'func'</param>
	<returns>The result of the function invocation</returns>
</member><member name="M:MCBackup.Reflector.Get(System.Object,System.String)">
	<summary>
 Returns the value of property 'prop' of object 'obj'
 </summary>
	<param name="obj">The object containing 'prop'</param>
	<param name="prop">The property name</param>
	<returns>The property value</returns>
</member><member name="M:MCBackup.Reflector.GetAs(System.Type,System.Object,System.String)">
	<summary>
 Returns the value of property 'prop' of object 'obj' which has type 'type'
 </summary>
	<param name="type">The type of 'obj'</param>
	<param name="obj">The object containing 'prop'</param>
	<param name="prop">The property name</param>
	<returns>The property value</returns>
</member><member name="M:MCBackup.Reflector.GetEnum(System.String,System.String)">
	<summary>
 Returns an enum value
 </summary>
	<param name="typeName">The name of enum type</param>
	<param name="name">The name of the value</param>
	<returns>The enum value</returns>
</member><member name="T:MCBackup.Reflector">
	<summary>
 This class is from the Front-End for Dosbox and is used to present a 'vista' dialog box to select folders.
 Being able to use a vista style dialog box to select folders is much better then using the shell folder browser.
 http://code.google.com/p/fed/

 Example:
 var r = new Reflector("System.Windows.Forms");
 </summary>
</member><member name="P:MCBackup.My.MyWpfExtension.Application">
	<summary>
 Returns the application object for the running application
 </summary>
</member><member name="P:MCBackup.My.MyWpfExtension.Computer">
	<summary>
 Returns information about the host computer.
 </summary>
</member><member name="P:MCBackup.My.MyWpfExtension.User">
	<summary>
 Returns information for the current user.  If you wish to run the application with the current 
 Windows user credentials, call My.User.InitializeWithWindowsUser().
 </summary>
</member><member name="P:MCBackup.My.MyWpfExtension.Log">
	<summary>
 Returns the application log. The listeners can be configured by the application's configuration file.
 </summary>
</member><member name="P:MCBackup.My.MyWpfExtension.Windows">
	<summary>
 Returns the collection of Windows defined in the project.
 </summary>
</member><member name="T:MCBackup.My.MyWpfExtension">
	<summary>
 Module used to define the properties that are available in the My Namespace for WPF
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>